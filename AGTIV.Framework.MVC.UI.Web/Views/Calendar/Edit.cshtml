@using AGTIV.Framework.MVC.Framework.Helper
@using AGTIV.Framework.MVC.UI.ViewModel.Calendar
@model CalendarProfileFormVM

@{
    ViewBag.Title = "Calendar Profile - Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";

    List<object> commands = new List<object>();
    commands.Add(new { type = "Edit", buttonOption = new { iconCss = "e-icons e-edit", cssClass = "e-flat" } });
    commands.Add(new { type = "Delete", buttonOption = new { iconCss = "e-icons e-delete", cssClass = "e-flat" } });

    List<object> toolbarItems = new List<object>();
    toolbarItems.Add("Search");
    toolbarItems.Add(new { text = "Add", tooltipText = "Add a new record", id = "Add", prefixIcon = "e-add" });
}

@using(Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="control-section" style="margin: auto 20px;">
        <div class="row">
            <div class="col-md-12">
                <div class="box box-info">
                    <div class="box-header with-border">
                        <h3 class="box-title">Edit - @Model.Name</h3>
                    </div>
                    <div class="box-body">
                        @Html.Partial("_CalendarProfileForm")
                    </div>
                    <div class="box-footer text-right">
                        @Html.EJS().Button("Edit").Type("submit").Content("Save").CssClass("e-primary").Render()
                        <a href="@Url.Action("Index")" class="e-btn">Back</a>
                    </div>
                </div>
            </div>
        </div>
        <div id="parentHolidayList">
            @if(Model.ParentProfileId != null)
            {
                @Html.Partial("_ParentHolidayList", Model.ParentProfileId)
            }
        </div>
        <div class="row">
            <div class="col-md-12">
                <div class="box box-info">
                    <div class="box-header with-border">
                        <h3 class="box-title">Manage calendar holidays</h3>
                    </div>
                    <div class="box-body">
                        @Html.EJS().Grid("HolidayGrid").DataSource(dataManager =>
                        {
                            dataManager
                            .Url(Url.Action("HolidayTable", new { id = Model.Id }))
                            .RemoveUrl(Url.Action("DeleteHoliday"))
                            .Adaptor("UrlAdaptor");
                        }).AllowSorting().AllowMultiSorting().GridLines(Syncfusion.EJ2.Grids.GridLine.Both).ToolbarClick("toolbarClick").Columns(col =>
                        {
                            col.Field(ConversionHelper.GetPropertyDisplayName<HolidayVM>(g => g.Name, getPropertyName: true)).HeaderText(ConversionHelper.GetPropertyDisplayName<HolidayVM>(g => g.Name)).Width("150px").Add();
                            col.Field(ConversionHelper.GetPropertyDisplayName<HolidayVM>(g => g.StartDate, getPropertyName: true)).HeaderText(ConversionHelper.GetPropertyDisplayName<HolidayVM>(g => g.StartDate)).Format("dd/MM/yyyy").Width("150px").Add();
                            col.Field(ConversionHelper.GetPropertyDisplayName<HolidayVM>(g => g.EndDate, getPropertyName: true)).HeaderText(ConversionHelper.GetPropertyDisplayName<HolidayVM>(g => g.EndDate)).Format("dd/MM/yyyy").Width("150px").Add();
                            col.Field(ConversionHelper.GetPropertyDisplayName<HolidayVM>(g => g.Year, getPropertyName: true)).HeaderText(ConversionHelper.GetPropertyDisplayName<HolidayVM>(g => g.Year)).Width("80px").Add();
                            col.Field(ConversionHelper.GetPropertyDisplayName<HolidayVM>(g => g.Days, getPropertyName: true)).HeaderText(ConversionHelper.GetPropertyDisplayName<HolidayVM>(g => g.Days)).Width("80px").Add();
                            col.Field(ConversionHelper.GetPropertyDisplayName<HolidayVM>(g => g.Id, getPropertyName: true)).IsPrimaryKey(true).Visible(false).Add();
                            col.Field(ConversionHelper.GetPropertyDisplayName<HolidayVM>(g => g.ProfileId, getPropertyName: true)).Visible(false).Add();
                            col.HeaderText("Commands").Width("130px").Commands(commands).Add();
                        }).CommandClick("commandClick").EditSettings(edit =>
                        {
                            edit.AllowDeleting(true).ShowDeleteConfirmDialog(true);
                        }).Toolbar(toolbarItems).ContextMenuItems(new List<object>() {
                            "AutoFit", "AutoFitAll", "SortAscending", "SortDescending", "Copy", "Delete", "FirstPage", "PrevPage", "LastPage", "NextPage"
                        }).AllowPaging().PageSettings(page => { page.PageSizes(true); }).SearchSettings(search => {
                            search.Fields(new string[] {
                                ConversionHelper.GetPropertyDisplayName<HolidayVM>(g => g.Name, getPropertyName: true)
                            });
                        }).RowHeight(40).Render()
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@section scripts{
    <script>
        function parentProfileChange() {
            var parentProfile = document.getElementById('ParentProfileId').ej2_instances[0];
            var grid = document.getElementById("ParentHolidayGrid").ej2_instances[0];

            if (parentProfile.value == null) {
                grid.dataSource.dataSource.url = "@Url.Action("HolidayTable")";
            }
            else {
                grid.dataSource.dataSource.url = "@Url.Action("HolidayTable")" + "?id=" + parentProfile.value;
            }

            grid.refresh();
        }

        function commandClick(args) {
            if (args.commandColumn.type == "Edit") {
                window.location.href = "@Url.Action("EditHoliday")" + "?id=" + args.rowData.Id;
            }
        }

        function toolbarClick(args) {
            if (args.item.id === 'Add') {
                window.location.href = "@Url.Action("CreateHoliday", new { id = Model.Id })";
            }
        }
    </script>
}